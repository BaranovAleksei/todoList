{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","common/error-utils.ts","features/Login/auth-reducer.tsx","app/app-reducer.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","common/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","todolistReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d416be8b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3edab39c-8b84-4e3b-a130-42dfb20faf00'\n    }\n}\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    ...settings\n})\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType< D = {} > = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\n    },\n    logout() {\n        return instance.delete<ResponseType<{ userId?: number }>>(`auth/login`)\n    },\n    me() {\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>(`auth/me`)\n    }\n}","import { setAppErrorAC, setAppErrorACT, setAppStatusAC, setAppStatusACT } from '../app/app-reducer';\nimport { Dispatch } from 'redux';\nimport { ResponseType } from '../api/todolist-api';\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n\tif (data.messages.length) {\n\t\tdispatch(setAppErrorAC( {error: data.messages[0]}))\n\t} else {\n\t\tdispatch(setAppErrorAC({error: 'Some error occurred'}))\n\t}\n\tdispatch(setAppStatusAC({ status:'failed'} ))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n\tdispatch(setAppErrorAC(error.message ? {error: error.message} : {error: 'Some error occurred'}))\n\tdispatch(setAppStatusAC({status: 'failed'} ))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorACT | setAppStatusACT>","import React from 'react'\nimport { Dispatch } from 'redux'\nimport { setAppStatusAC } from \"../../app/app-reducer\"\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/error-utils\";\nimport {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n\tisLoggedIn: false\n}\n\nexport const slice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  reducers: {\n    setIsLoggedInAC( state: any, action: PayloadAction<{value: boolean}> ) {\n       state.isLoggedIn =  action.payload.value\n    }\n  }\n})\n\nexport const authReducer = slice.reducer\nexport const { setIsLoggedInAC } = slice.actions\n\n// (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n// \tswitch (action.type) {\n// \t\tcase 'login/SET-IS-LOGGED-IN':\n// \t\t\treturn {...state, isLoggedIn: action.value}\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// }\n\n//action\n// export const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n//thunk\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n\tdispatch(setAppStatusAC({status:'loading'}))\n\tauthAPI.login(data)\n\t\t.then(res => {\n\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\tdispatch(setIsLoggedInAC( {value: true} ))\n\t\t\t\tdispatch(setAppStatusAC({status:'succeeded'}))\n\t\t\t} else {\n\t\t\t\thandleServerAppError( res.data, dispatch)\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\thandleServerNetworkError(error, dispatch)\n\t\t})\n}\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n\tdispatch(setAppStatusAC({status:'loading'}))\n\tauthAPI.logout()\n\t\t.then(res => {\n\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\tdispatch(setIsLoggedInAC({ value: false}))\n\t\t\t\tdispatch(setAppStatusAC({status:'succeeded'}))\n\t\t\t} else {\n\t\t\t\thandleServerAppError(res.data, dispatch)\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\thandleServerNetworkError(error, dispatch)\n\t\t})\n}\n\n// type ActionsType = ReturnType<typeof setIsLoggedInAC>\n\n// type InitialStateType = {\n// \tisLoggedIn: boolean\n// }\n//\n// type ThunkDispatch = Dispatch<ActionsType | setAppStatusACT | setAppErrorACT>","import {authAPI} from \"../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {Dispatch} from \"redux\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\ntype StateType = {\n  status: StatusType,\n  error:  null | string\n  isInitialized: boolean\n}\n\nconst initialState: StateType = {\n\tstatus:  'idle',\n\tisInitialized: false,\n\terror: null\n}\n\nexport const slice = createSlice({\n  name: 'app',\n  initialState: initialState,\n  reducers: {\n    setAppStatusAC ( state, action: PayloadAction<{status: StatusType}>) {\n      state.status = action.payload.status\n    },\n    setAppErrorAC ( state, action: PayloadAction<{ error: null | string}>) {\n      state.error = action.payload.error\n    },\n    setAppIsInitializedAC ( state, action: PayloadAction<{isInitialized: boolean}> ) {\n      state.isInitialized = action.payload.isInitialized\n    }\n  }\n})\n\nexport const appReducer = slice.reducer\nexport const { setAppStatusAC, setAppErrorAC, setAppIsInitializedAC } = slice.actions\n\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\n// export const setAppErrorAC = (error: string | null ) => ({type: 'APP/SET-ERROR', error} as const)\n// export const setAppIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\n\nexport type setAppErrorACT = ReturnType<typeof setAppErrorAC>\nexport type setAppStatusACT = ReturnType<typeof setAppStatusAC>\nexport type setAppIsInitializedACT = ReturnType<typeof setAppIsInitializedAC>\n\n// type ActionType = setAppErrorACT | setAppStatusACT | setAppIsInitializedACT\n\n// export const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n// \tswitch (action.type) {\n// \t\tcase 'APP/SET-STATUS':\n// \t\t\treturn {...state, status: action.status}\n// \t\tcase 'APP/SET-ERROR':\n// \t\t\treturn {...state, error: action.error}\n// \t\tcase 'APP/SET-IS-INITIALIZED':\n// \t\t\treturn {...state, isInitialized: action.value}\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// }\n\n//thunk\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n\tauthAPI.me()\n\t\t.then( res => {\n\t\t\tif (res.data.resultCode === 0 ) {\n\t\t\t\tdispatch(setIsLoggedInAC({value: true}))\n\t\t\t} else {\n\t\t\t\tconsole.log('not login')\n\t\t\t}\n\t\t\tdispatch(setAppIsInitializedAC({ isInitialized: true }))\n\t\t})\n}","import {todolistsAPI, TodolistType} from '../../api/todolist-api'\nimport {Dispatch} from 'redux'\nimport {StatusType, setAppStatusAC, setAppStatusACT} from \"../../app/app-reducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const slice = createSlice({\n  name: 'todolist',\n  initialState: initialState,\n  reducers: {\n    removeTodolistAC: (state, action: PayloadAction<{id: string}>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.id)\n      if (index > -1) {\n        state.splice(index, 1)\n      }\n    },\n    addTodolistAC: (state, action: PayloadAction<{todolist: TodolistType}>) => {\n      state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n    },\n    changeTodolistTitleAC: (state, action: PayloadAction<{id: string, title: string}>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.id)\n      state[index].title = action.payload.title\n    },\n    changeTodolistFilterAC: (state, action: PayloadAction<{id: string, filter: FilterValuesType}>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.id)\n      state[index].filter = action.payload.filter\n    },\n    setTodolistsAC: (state, action: PayloadAction<{todolists: Array<TodolistType>}>) => {\n      return action.payload.todolists.map(tl => ({...tl, filter:'all', entityStatus: 'idle'}))\n    },\n    changeTodolistEntityStatusAC: (state, action: PayloadAction<{id: string, status: StatusType}>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.id)\n      state[index].entityStatus = action.payload.status\n    }\n  }\n})\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n//     switch (action.type) {\n//         case 'REMOVE-TODOLIST':\n//             return state.filter(tl => tl.id != action.id)\n//         case 'ADD-TODOLIST':\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n//         case 'CHANGE-TODOLIST-TITLE':\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n//         case 'CHANGE-TODOLIST-FILTER':\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n//         case 'SET-TODOLISTS':\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n//       case 'CHANGE-TODOLIST-ENTITY-STATUS':\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n//         default:\n//             return state\n//     }\n// }\n\nexport const todolistReducer = slice.reducer\nexport const { removeTodolistAC, addTodolistAC,  changeTodolistTitleAC,\n  changeTodolistFilterAC, setTodolistsAC , changeTodolistEntityStatusAC} = slice.actions\n\n// actions\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\n//     type: 'CHANGE-TODOLIST-TITLE',\n//     id,\n//     title\n// } as const)\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n//     type: 'CHANGE-TODOLIST-FILTER',\n//     id,\n//     filter\n// } as const)\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n// export const changeTodolistEntityStatusAC = (id: string, status: StatusType) => ({\n//   type: 'CHANGE-TODOLIST-ENTITY-STATUS',\n//   id,\n//   status\n// } as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.getTodolists()\n          .then((res) => {\n              dispatch(setTodolistsAC({ todolists: res.data}))\n              dispatch(setAppStatusAC({ status: 'succeeded'}))\n          })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({ status: 'loading'}))\n        dispatch(changeTodolistEntityStatusAC({id: todolistId , status: \"loading\"}))\n        todolistsAPI.deleteTodolist(todolistId)\n          .then((res) => {\n              dispatch(removeTodolistAC({ id: todolistId }))\n              dispatch(setAppStatusAC({status: 'succeeded'}))\n          })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.createTodolist(title)\n          .then((res) => {\n              dispatch(addTodolistAC( {todolist: res.data.data.item }))\n              dispatch(setAppStatusAC({status: \"succeeded\"}))\n          })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: \"loading\"}))\n        todolistsAPI.updateTodolist(id, title)\n          .then((res) => {\n              dispatch(changeTodolistTitleAC( {id: id, title: title}))\n              dispatch(setAppStatusAC({status: \"succeeded\"}))\n          })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\n\n// type ActionsType =\n//   | RemoveTodolistActionType\n//   | AddTodolistActionType\n//   | ReturnType<typeof changeTodolistTitleAC>\n//   | ReturnType<typeof changeTodolistFilterAC>\n//   | SetTodolistsActionType\n//   | ReturnType<typeof changeTodolistEntityStatusAC>\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: StatusType\n}\n\n// type ThunkDispath = Dispatch< ActionsType | setAppStatusACT >\n","import {\n  addTodolistAC,\n  AddTodolistActionType, removeTodolistAC,\n  RemoveTodolistActionType, setTodolistsAC,\n  SetTodolistsActionType\n} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolist-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n  initializeAppTC,\n  setAppErrorAC,\n  setAppErrorACT,\n  setAppStatusAC,\n  setAppStatusACT,\n  StatusType\n} from \"../../app/app-reducer\"\nimport {handleServerAppError} from '../../common/error-utils'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\"\n\nconst initialState: TasksStateType = {}\n\nexport const slice = createSlice({\n  name: 'tasks',\n  initialState: initialState,\n  reducers: {\n    removeTaskAC (state, action: PayloadAction<{taskId: string, todolistId: string}>) {\n      const tasks = state[action.payload.todolistId]\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\n      if (index > -1) {\n        tasks.splice(index, 1)\n      }\n    },\n    addTaskAC (state, action: PayloadAction<{task: TaskType}>) {\n      state[action.payload.task.todoListId].unshift(action.payload.task)\n    },\n    updateTaskAC (state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\n      const tasks = state[action.payload.todolistId]\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\n      if (index > -1) {\n        tasks[index] = {...tasks[index], ...action.payload.model}\n      }\n    },\n    setTasksAC (state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>) {\n      state[action.payload.todolistId] = action.payload.tasks\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addTodolistAC, (state, action) => {\n      state[action.payload.todolist.id] = []\n    });\n    builder.addCase(removeTodolistAC, (state, action) => {\n      delete  state[action.payload.id]\n    });\n    builder.addCase(setTodolistsAC, (state, action) => {\n      action.payload.todolists.forEach((tl: any) => {\n        state[tl.id] = []\n      })\n    });\n  }\n})\n\nexport const tasksReducer = slice.reducer\nexport const { removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } = slice.actions\n\n\n// export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n//   switch (action.type) {\n//     case 'REMOVE-TASK':\n//       return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n//     case 'ADD-TASK':\n//       return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n//     case 'UPDATE-TASK':\n//       return {\n//         ...state,\n//         [action.todolistId]: state[action.todolistId]\n//           .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n//       }\n//     case 'ADD-TODOLIST':\n//       return {...state, [action.todolist.id]: []}\n//     case 'REMOVE-TODOLIST':\n//       const copyState = {...state}\n//       delete copyState[action.id]\n//       return copyState\n//     case 'SET-TODOLISTS': {\n//       const copyState = {...state}\n//       action.todolists.forEach(tl => {\n//         copyState[tl.id] = []\n//       })\n//       return copyState\n//     }\n//     case 'SET-TASKS':\n//       return {...state, [action.todolistId]: action.tasks}\n//     default:\n//       return state\n//   }\n// }\n\n// actions\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\n//   ({type: 'REMOVE-TASK', taskId, todolistId} as const)\n// export const addTaskAC = (task: TaskType) =>\n//   ({type: 'ADD-TASK', task} as const)\n// export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n//   ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n//   ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({status: \"loading\"}))\n  todolistsAPI.getTasks(todolistId)\n    .then((res) => {\n      const tasks = res.data.items\n      dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\n      dispatch(setAppStatusAC({status: \"succeeded\"}))\n    })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({status: 'loading'}))\n  todolistsAPI.deleteTask(todolistId, taskId)\n    .then(res => {\n      const action = removeTaskAC({taskId: taskId, todolistId: todolistId })\n      dispatch(action)\n      dispatch(setAppStatusAC({status: 'succeeded'}))\n    })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({status: 'loading'}))\n  todolistsAPI.createTask(todolistId, title)\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        const task = res.data.data.item\n        dispatch(addTaskAC({ task: task }))\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\n      } else {\n        if (res.data.messages.length) {\n          dispatch(setAppErrorAC({error: res.data.messages[0]}))\n        } else {\n          dispatch(setAppErrorAC({error: 'Some error occurred'}))\n        }\n        handleServerAppError(res.data, dispatch)\n      }\n    })\n    .catch((error) => {\n      handleServerAppError(error, dispatch)\n    })\n\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    const state = getState()\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\n    if (!task) {\n      //throw new Error(\"task not found in the state\");\n      console.warn('task not found in the state')\n      return\n    }\n\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...domainModel\n    }\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\n          dispatch(action)\n        } else {\n         if (res.data.messages.length) {\n          dispatch(setAppErrorAC( {error: res.data.messages[0]}))\n         } else {\n          dispatch(setAppErrorAC({error: 'Some error occurrend'}))\n         }\n         dispatch(setAppStatusAC({status: \"failed\"}))\n        }\n        })\n      .catch( (error) => {\n        dispatch(setAppErrorAC(error.message))\n        dispatch(setAppStatusAC({status: 'failed'}))\n      })\n  }\n\n// types\n// type ThunkDispatch = Dispatch<ActionsType | setAppStatusACT | setAppErrorACT>\n\nexport type UpdateDomainTaskModelType = {\n  title?: string\n  description?: string\n  status?: TaskStatuses\n  priority?: TaskPriorities\n  startDate?: string\n  deadline?: string\n}\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n// type ActionsType =\n//   | ReturnType<typeof removeTaskAC>\n//   | ReturnType<typeof addTaskAC>\n//   | ReturnType<typeof updateTaskAC>\n//   | AddTodolistActionType\n//   | RemoveTodolistActionType\n//   | SetTodolistsActionType\n//   | ReturnType<typeof setTasksAC>\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport { IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo( function ({addItem, disabled = false}: AddItemFormPropsType) {\n    // console.log(\"AddItemForm is called\")\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== \"\") {\n            addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox />\n        </IconButton>\n    </div>\n} );\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n  value: string\n  onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\n  console.log(\"EditableSpan\");\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(props.value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.value);\n  }\n  const activateViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  }\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  return editMode\n      ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n      : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api'\n\ntype TaskPropsType = {\n\ttask: TaskType\n\ttodolistId: string\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n\tchangeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n\tremoveTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\tconst onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n\tconst onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n\t\tlet newIsDoneValue = e.currentTarget.checked\n\t\tprops.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n\t}, [props.task.id, props.todolistId]);\n\n\tconst onTitleChangeHandler = useCallback((newValue: string) => {\n\t\tprops.changeTaskTitle(props.task.id, newValue, props.todolistId)\n\t}, [props.task.id, props.todolistId]);\n\n\treturn <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n\t\t<Checkbox\n\t\t\tchecked={props.task.status === TaskStatuses.Completed}\n\t\t\tcolor=\"primary\"\n\t\t\tonChange={onChangeHandler}\n\t\t/>\n\n\t\t<EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n\t\t<IconButton onClick={onClickHandler}>\n\t\t\t<Delete/>\n\t\t</IconButton>\n\t</div>\n})","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolist-api'\nimport {changeTodolistFilterAC, FilterValuesType, TodolistDomainType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\nimport {StatusType} from \"../../../app/app-reducer\";\n\ntype PropsType = {\n\ttodolist: TodolistDomainType\n\ttasks: Array<TaskType>\n\t// changeFilter: (value: FilterValuesType, todolistId: string) => void\n\taddTask: (title: string, todolistId: string) => void\n\tchangeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n\tchangeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n\tremoveTask: (taskId: string, todolistId: string) => void\n\tremoveTodolist: (id: string) => void\n\tchangeTodolistTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo(function ({...props}:PropsType) {\n\n\tconst dispatch = useDispatch()\n\tuseEffect(() => {\n\t\tconst thunk = fetchTasksTC(props.todolist.id)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst addTask = useCallback((title: string) => {\n\t\tprops.addTask(title, props.todolist.id)\n\t}, [props.addTask, props.todolist.id])\n\n\tconst removeTodolist = () => {\n\t\tprops.removeTodolist(props.todolist.id)\n\t}\n\tconst changeTodolistTitle = useCallback((title: string) => {\n\t\tprops.changeTodolistTitle(props.todolist.id, title)\n\t}, [props.todolist.id, props.changeTodolistTitle])\n\n\t// const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter]\n  // const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\n\t// const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\n\n  let onAllClickHandler = useCallback(() => {\n    dispatch( changeTodolistFilterAC({ id: props.todolist.id , filter: 'all'}))\n  }, [dispatch, props.todolist.id])\n  let onActiveClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC({id: props.todolist.id , filter: 'active'}))\n  }, [dispatch, props.todolist.id])\n  let onCompletedClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC({id: props.todolist.id , filter: 'completed'}))\n  }, [dispatch, props.todolist.id])\n\n\tlet tasksForTodolist = props.tasks\n\n\tif (props.todolist.filter === 'active') {\n\t\ttasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n\t}\n\tif (props.todolist.filter === 'completed') {\n\t\ttasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n\t}\n\n\t// @ts-ignore\n\treturn <div>\n\t\t<h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n\t\t\t<IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n\t\t\t\t<Delete/>\n\t\t\t</IconButton>\n\t\t</h3>\n\t\t<AddItemForm addItem={addTask} disabled = {props.todolist.entityStatus === \"loading\"}/>\n\t\t<div>\n\t\t\t{\n\t\t\t\ttasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\n\t\t\t\t                                removeTask={props.removeTask}\n\t\t\t\t                                changeTaskTitle={props.changeTaskTitle}\n\t\t\t\t                                changeTaskStatus={props.changeTaskStatus}\n\t\t\t\t/>)\n\t\t\t}\n\t\t</div>\n\t\t<div style={{paddingTop: '10px'}}>\n\t\t\t<Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n\t\t\t        onClick={onAllClickHandler}\n\t\t\t        color={'default'}\n\t\t\t>All\n\t\t\t</Button>\n\t\t\t<Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n\t\t\t        onClick={onActiveClickHandler}\n\t\t\t        color={'primary'}>Active\n\t\t\t</Button>\n\t\t\t<Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n\t\t\t        onClick={onCompletedClickHandler}\n\t\t\t        color={'secondary'}>Completed\n\t\t\t</Button>\n\t\t</div>\n\t</div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n\taddTodolistTC,\n\tchangeTodolistFilterAC,\n\tchangeTodolistTitleTC,\n\tfetchTodolistsTC,\n\tFilterValuesType,\n\tremoveTodolistTC,\n\tTodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolist-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport {Redirect} from \"react-router-dom\";\n\nexport const TodolistsList: React.FC = () => {\n\n\tconst dispatch = useDispatch()\n\tconst todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n\tconst tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n\tuseEffect(() => {\n\t\tconst thunk = fetchTodolistsTC()\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst removeTask = useCallback(function (id: string, todolistId: string) {\n\t\tconst thunk = removeTaskTC(id, todolistId)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst addTask = useCallback(function (title: string, todolistId: string) {\n\t\tconst thunk = addTaskTC(title, todolistId)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n\t\tconst thunk = updateTaskTC(id, {status}, todolistId)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n\t\tconst thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n\t\tdispatch(thunk)\n\t}, [])\n\n\t// const changeFilter = useCallback(function (todolistId: string, value: FilterValuesType) {\n\t// \tconst action = changeTodolistFilterAC( todolistId, value )\n\t// \tdispatch(action)\n\t// }, [])\n\n\tconst removeTodolist = useCallback(function (id: string) {\n\t\tconst thunk = removeTodolistTC(id)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst changeTodolistTitle = useCallback(function (id: string, title: string) {\n\t\tconst thunk = changeTodolistTitleTC(id, title)\n\t\tdispatch(thunk)\n\t}, [])\n\n\tconst addTodolist = useCallback((title: string) => {\n\t\tconst thunk = addTodolistTC(title)\n\t\tdispatch(thunk)\n\t}, [dispatch])\n\n\tif (!isLoggedIn) {\n\t\treturn <Redirect to={'/login'}/>\n\t}\n\n\treturn <>\n\t\t<Grid container style={{padding: '20px'}}>\n\t\t\t<AddItemForm addItem={addTodolist}/>\n\t\t</Grid>\n\t\t<Grid container spacing={3}>\n\t\t\t{\n\t\t\t\ttodolists.map(tl => {\n\t\t\t\t\tlet allTodolistTasks = tasks[tl.id]\n\n\t\t\t\t\treturn <Grid item key={tl.id}>\n\t\t\t\t\t\t<Paper style={{padding: '10px'}}>\n\t\t\t\t\t\t\t<Todolist\n\t\t\t\t\t\t\t\ttodolist = {tl}\n\t\t\t\t\t\t\t\ttasks={allTodolistTasks}\n\t\t\t\t\t\t\t\tremoveTask={removeTask}\n\t\t\t\t\t\t\t\t// changeFilter={changeFilter}\n\t\t\t\t\t\t\t\taddTask={addTask}\n\t\t\t\t\t\t\t\tchangeTaskStatus={changeStatus}\n\t\t\t\t\t\t\t\tremoveTodolist={removeTodolist}\n\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle}\n\t\t\t\t\t\t\t\tchangeTodolistTitle={changeTodolistTitle}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Paper>\n\t\t\t\t\t</Grid>\n\t\t\t\t})\n\t\t\t}\n\t\t</Grid>\n\t</>\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../app/store\";\nimport {setAppErrorAC} from \"../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n\tconst error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n\tconst dispatch = useDispatch()\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn\n\t\t}\n\t\tdispatch(setAppErrorAC({error: null} ))\n\t}\n\tconst isOpen = error !== null\n\treturn (\n\t\t<Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}\n\t\t          anchorOrigin = {{vertical: 'top', horizontal: 'center'}}>\n\t\t\t<Alert onClose={handleClose} severity=\"error\">\n\t\t\t\t{error}\n\t\t\t</Alert>\n\t\t</Snackbar>\n\t)\n}\n\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel,\n\t\t\t\tFormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {loginTC} from \"./auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\n\ntype FormikErrorType = {\n\temail?: string\n\tpassword?: string\n\trememberMe?: boolean\n}\n\nexport const Login = () => {\n  const dispatch = useDispatch()\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\trememberMe: false\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {}\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Required'\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = 'Invalid email address'\n\t\t\t}\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Required'\n\t\t\t} else if (!/^[A-Z0-9._%+-]{2,}$/i.test(values.password)) {\n\t\t\t\terrors.password = 'invalid password'\n\t\t\t}\n\t\t\treturn errors\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(loginTC(values))\n\t\t}\n\t})\n\n\tif (isLoggedIn) {\n\t\treturn <Redirect to = {'/'}/>\n\t}\n\n\treturn <Grid container justify=\"center\">\n\t\t<Grid item xs={4}>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<FormControl>\n\t\t\t\t\t<FormLabel>\n\t\t\t\t\t\t<p>To log in get registered\n\t\t\t\t\t\t\t<a href={'https://social-network.samuraijs.com/'}\n\t\t\t\t\t\t\t   target={'_blank'}>here\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\n\t\t\t\t\t\t<p>Password: free</p>\n\t\t\t\t\t</FormLabel>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t// name = 'email'\n\t\t\t\t\t\t\t// onChange = {formik.handleChange}\n\t\t\t\t\t\t\t// value = {formik.values.email}\n\t\t\t\t\t\t\t// onBlur = { formik.handleBlur }\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')} />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tformik.touched.email && formik.errors.email\n\t\t\t\t\t\t\t\t? <div style = {{color: 'red'}}>{formik.errors.email}</div>\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t// name = 'password'\n\t\t\t\t\t\t\t// onChange={formik.handleChange}\n\t\t\t\t\t\t\t// value = {formik.values.password}\n\t\t\t\t\t\t\t// onBlur={ formik.handleBlur}\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{ formik.touched.password && formik.errors.password ? <div style = {{color: 'red'}}>{formik.errors.password}</div> : null}\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={'Remember me'}\n\t\t\t\t\t\t\tcontrol={<Checkbox\n\t\t\t\t\t\t\t\t// name = 'rememberMe'\n\t\t\t\t\t\t\t\t// onChange = { formik.handleChange }\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\t\t\tchecked = { formik.values.rememberMe}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</FormControl>\n\t\t\t</form>\n\n\t\t</Grid>\n\t</Grid>\n}\n\n","import React, {useCallback, useEffect} from 'react'\nimport '../App.css'\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography\n} from '@material-ui/core'\nimport { Menu } from '@material-ui/icons'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport LinearDeterminate from \"../common/LinearProgressCast\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { AppRootStateType } from \"./store\"\nimport {initializeAppTC, StatusType,} from \"./app-reducer\"\nimport { ErrorSnackbar } from \"../common/ErrorSnackbar\"\nimport { Login } from \"../features/Login/Login\"\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport {logoutTC} from \"../features/Login/auth-reducer\"\n\nfunction App() {\n\n    const status = useSelector<AppRootStateType, StatusType>((state) => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n      dispatch(initializeAppTC())\n    }, [])\n\n    const logoutHandler = useCallback(() => {\n      dispatch(logoutTC())\n    }, [])\n\n    if(!isInitialized) {\n      return <div\n        style = {{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n        <CircularProgress/>\n      </div>\n    }\n\n    return  <BrowserRouter>\n      <div className=\"App\">\n        <ErrorSnackbar/>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Menu/>\n            </IconButton>\n            <Typography variant=\"h6\">\n              News\n            </Typography>\n            { isLoggedIn && <Button color=\"inherit\" onClick={ logoutHandler }>Log out</Button>}\n          </Toolbar>\n          { status === 'loading' && <LinearProgress/> }\n        </AppBar>\n        <Container fixed>\n          <Route exact path={\"/\"} render = {() => <TodolistsList />}/>\n          <Route path = {\"/login\"} render = {() => <Login/>}/>\n          <Route path = {\"/404\"} render = {() => <h1>404: PAGE NOT FOUND</h1>}/>\n        </Container>\n      </div>\n    </BrowserRouter>\n}\n\nexport default App\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistReducer} from '../features/TodolistsList/todolists-reducer';\nimport { combineReducers} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\"\nimport {authReducer} from \"../features/Login/auth-reducer\"\nimport {configureStore} from \"@reduxjs/toolkit\"\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n\ttasks: tasksReducer,\n\ttodolists: todolistReducer,\n\tapp: appReducer,\n\tauth: authReducer\n})\n\n// непосредственно создаём store\n// export const store = createStore( rootReducer, applyMiddleware(thunkMiddleware) );\n// export const store = createStore ( rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n// toolkit\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)}\n)\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './app/App'\nimport {Provider} from 'react-redux'\nimport {store} from './app/store'\n\nReactDOM.render(\n\t<Provider store = {store}>\n\t\t<App />\n\t</Provider>,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}